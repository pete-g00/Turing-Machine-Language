{
   "aNbMcNM": "// accept strings containing a's, b's and c's,\r\n// with a's before b's before c's, and the number of c's \r\n// equal to the number of a's and b's\r\nalphabet = {a, b, c}\r\nmodule aNbMcNM {\r\n    // base case: blank\r\n    if blank {\r\n        accept\r\n    } \r\n    // c: reject\r\n    if c {\r\n        reject\r\n    }\r\n    // a: remove it, go to the end and remove c\r\n    if a {\r\n        changeto blank\r\n        move right\r\n        while a, b, c {\r\n            move right\r\n        } if blank {\r\n            move left\r\n            if a, b, blank {\r\n                reject\r\n            } if c {\r\n                changeto blank\r\n                move left\r\n                while a, b, c {\r\n                    move left\r\n                } if blank {\r\n                    move right\r\n                    goto aNbMcNM\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // b => move to bMcM but don't move\r\n    if b {\r\n        move left\r\n        move right\r\n        goto bMcM\r\n    }\r\n}\r\n// accept strings starting with b's followed by the same number of c's\r\n// no a's accepted\r\nmodule bMcM {\r\n    // base case: blank\r\n    if blank {\r\n        accept\r\n    } \r\n    // cannot start with a or c\r\n    if a, c {\r\n        reject\r\n    }\r\n    // b: remove it, go to the end and remove c\r\n    if b {\r\n        changeto blank\r\n        move right\r\n        while a, b, c {\r\n            move right\r\n        } if blank {\r\n            move left\r\n            if a, b, blank {\r\n                reject\r\n            } if c {\r\n                changeto blank\r\n                move left\r\n                while a, b, c {\r\n                    move left\r\n                } if blank {\r\n                    move right\r\n                    goto bMcM\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
   "aNbN": "// accepts strings of the form a^nb^n for some n >= 0\r\n// e.g. blank, ab, aabb, aaabbb, etc.\r\nalphabet = {a, b}\r\nmodule aNbN {\r\n    // empty string => base case, accept\r\n    if blank {\r\n        accept\r\n    }\r\n    // cannot start with b\r\n    if b {\r\n        reject\r\n    }\r\n    // starts with a => remove the last b\r\n    if a {\r\n        changeto blank\r\n        move right\r\n        // move to the end\r\n        while a, b {\r\n            move right\r\n        } if blank {\r\n            move left\r\n            // the last letter must be a b\r\n            if a, blank {\r\n                reject\r\n            } if b {\r\n                changeto blank\r\n                move left\r\n                // move back and restart\r\n                while a, b {\r\n                    move left\r\n                } if blank {\r\n                    move right\r\n                    goto aNbN\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
   "aNbNcN": "// accepts strings of the form a^nb^nc^n for some n >= 0\r\n// e.g. blank, abc, aabbcc, aaabbbccc, etc.\r\n// aim: can only check 2 letters at a time, so\r\n// - check same no of a's and c's at the start\r\n// - remove a's but not the c's or else there \r\n// won't be anything to compare with b\r\n// - replace c's at the end with a's\r\n// - after we find a b at the start, check b^n a^n\r\nalphabet = {a, b, c}\r\nmodule aNbNcN {\r\n    // base case: accept\r\n    if blank {\r\n        accept\r\n    }\r\n    // c: reject\r\n    if c {\r\n        reject\r\n    }\r\n    // a: remove it and replace the c with an a (and not remove it)\r\n    if a {\r\n        changeto blank\r\n        move right\r\n        while a, b, c {\r\n            move right\r\n        } if blank {\r\n            move left\r\n            // we replace c's with a's, so find the last c before the a's\r\n            while a {\r\n                move left\r\n            } if b, blank {\r\n                reject\r\n            } if c {\r\n                changeto a\r\n                move left\r\n                while a, b, c {\r\n                    move left\r\n                } if blank {\r\n                    move right\r\n                    goto aNbNcN\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // b: redirect to bNaN without moving\r\n    if b {\r\n        move left\r\n        move right\r\n        goto bNaN\r\n    }\r\n}\r\nmodule bNaN {\r\n    // base case: accept\r\n    if blank {\r\n        accept\r\n    }\r\n    // must start with a b\r\n    if a, c {\r\n        reject\r\n    }\r\n    // b: remove it, go to the end and remove an a\r\n    if b {\r\n        changeto blank\r\n        move right\r\n        while a, b, c {\r\n            move right\r\n        } if blank {\r\n            move left\r\n            if b, c, blank {\r\n                reject\r\n            } if a {\r\n                changeto blank\r\n                move left\r\n                while a, b, c {\r\n                    move left\r\n                } if blank {\r\n                    move right\r\n                    goto bNaN\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
   "equalAB": "// checks whether a string has an equal number of a's and b's\r\n// aim: the module is recursive, and in one iteration should remove \r\n// one a and one b. Base it on the first value (if a at the start, remove \r\n// the last b; and vice versa). \r\nalphabet = {a, b}\r\nmodule equalAB {\r\n    // base case: blank\r\n    if blank {\r\n        accept\r\n    } \r\n    // a: remove it, go to the end and remove the last b\r\n    if a {\r\n        changeto blank\r\n        move right\r\n        while a, b {\r\n            move right\r\n        } if blank {\r\n            move left\r\n            // last character b => remove it and restart\r\n            if b {\r\n                changeto blank\r\n                move left\r\n                while a, b {\r\n                    move left\r\n                } if blank {\r\n                    move right\r\n                    goto equalAB\r\n                }\r\n            }\r\n            // last character blank => more a's than b's\r\n            if blank {\r\n                reject\r\n            }\r\n            // last character a => remove it, \r\n            // and replace the last b with an a\r\n            if a {\r\n                changeto blank\r\n                move left\r\n                while a {\r\n                    move left\r\n                } \r\n                // no b's => more a's than b's\r\n                if blank {\r\n                    reject\r\n                } if b {\r\n                    changeto a\r\n                    move left\r\n                    while a, b {\r\n                        move left\r\n                    } if blank {\r\n                        move right\r\n                        goto equalAB\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } \r\n    // b: remove it, go to the end and remove the last a\r\n    if b {\r\n        changeto blank\r\n        move right\r\n        while a, b {\r\n            move right\r\n        } if blank {\r\n            move left\r\n            // last character a => remove it and restart\r\n            if a {\r\n                changeto blank\r\n                move left\r\n                while a, b {\r\n                    move left\r\n                } if blank {\r\n                    move right\r\n                    goto equalAB\r\n                }\r\n            }\r\n            // last character blank => more b's than a's\r\n            if blank {\r\n                reject\r\n            }\r\n            // last character b => remove it, \r\n            // and replace the last a with an b\r\n            if b {\r\n                changeto blank\r\n                move left\r\n                while b {\r\n                    move left\r\n                } \r\n                // no a's => more b's than a's\r\n                if blank {\r\n                    reject\r\n                } if a {\r\n                    changeto b\r\n                    move left\r\n                    while a, b {\r\n                        move left\r\n                    } if blank {\r\n                        move right\r\n                        goto equalAB\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
   "isDiv2": "// checks whether a binary number is divisible by 2\r\nalphabet = {0, 1}\r\nmodule isDiv2 {\r\n    // move to the end\r\n    while 0, 1 {\r\n        move right\r\n    } if blank {\r\n        move left\r\n        // check last letter is 0\r\n        if 0 {\r\n            accept\r\n        } if 1, blank {\r\n            reject\r\n        }\r\n    }\r\n}",
   "isDiv4": "// checks whether a binary number is divisible by 4\r\nalphabet = {0, 1}\r\nmodule isDiv2 {\r\n    // move to the end\r\n    while 0, 1 {\r\n        move right\r\n    } if blank {\r\n        move left\r\n        // last letter must be 0\r\n        if 0 {\r\n            move left\r\n            // second last letter cannot be 1\r\n            if 1 {\r\n                reject\r\n            } if 0, blank {\r\n                accept\r\n            }\r\n        } if 1, blank {\r\n            reject\r\n        }\r\n    }\r\n}"
}